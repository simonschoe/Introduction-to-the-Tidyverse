build-last-errors="[]"
build-last-errors-base-dir=""
build-last-outputs="[]"
compile_pdf_state="{\"tab_visible\":false,\"running\":false,\"target_file\":\"\",\"output\":\"\",\"errors\":[]}"
files.monitored-path=""
find-in-files-state="{\"handle\":\"f94fd216f1ec4007ab6fefedc406ab08\",\"input\":\"note:\",\"path\":\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse\",\"regex\":false,\"ignoreCase\":true,\"results\":{\"file\":[\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/index.html\",\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/index.html\",\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/index.html\",\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/index.html\",\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/index.html\",\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/libs/htmlwidgets-1.5.1/htmlwidgets.js\",\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/libs/jquery-1.11.3/jquery.js\",\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/libs/plotly-binding-4.9.2.1/plotly.js\",\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/libs/plotly-binding-4.9.2.1/plotly.js\",\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/libs/plotly-binding-4.9.2.1/plotly.js\",\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/slides/05_readr.Rmd\",\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/slides/07_dplyr.Rmd\",\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/slides/08_purrr.html\",\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/slides/08_purrr.html\",\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/slides/08_purrr.Rmd\",\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/slides/08_purrr.Rmd\",\"C:/Users/s_scho53/Desktop/L09_Desktop/workshops/04_tidyverse/slides/09_ggplot2.Rmd\"],\"line\":[711,1695,2276,2335,2869,482,2550,531,620,820,27,460,542,578,244,287,501],\"lineValue\":[\"*Note: In most European countries MS Excel is using `;` as the common delimiter, which can be important by simply switching to the `read_csv2()` function.*\",\"*Note: Instead of using `ungroup()` you may also set the `.groups` argument in `summarise()` equal to \\\"drop\\\".*\",\"*Note: For accessing elements in a nested `tibble` you may use the `pluck()`. For example, for accessing the first `tibble` in the column `data`, you may run `nested_penguins %&gt;% pluck(\\\"data\\\", 1)`.*\",\"*Note: You may eventually want to drop the `lin_reg` and `data`, otherwise you carry around a lot of redundant data in your `tibble` which may exceed your memory storage capacity very quickly.*\",\"*Note: `geom_col()` takes a `x` and `y` argument, whereas `geom_bar()` only takes a variable `x` and computes the `y`-quantity internally (e.g., the number of observations).*\",\"// Shiny's defaults. NOTE: If Shiny's output bindings gain additional\",\"// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\",\"// NOTE: this callback is triggered when *directly* altering\",\"// NOTE: we purposely do _not_ restore selection(s), since on filter,\",\"Note: in all of these match functions, we assume needleSet (i.e. the selected keys)\",\"*Note: In most European countries MS Excel is using `;` as the common delimiter, which can be important by simply switching to the `read_csv2()` function.*\",\"*Note: Instead of using `ungroup()` you may also set the `.groups` argument in `summarise()` equal to \\\"drop\\\".*\",\"<p>.pull-right[ .footnote[ <em>Note: For accessing elements in a nested <code>tibble</code> you may use the <code>pluck()</code>. For example, for accessing the first <code>tibble</code> in the column <code>data</code>, you may run <code>nested_penguins %&gt;% pluck(&quot;data&quot;, 1)</code>.</em>...\",\"<p>.footnote[ <em>Note: You may eventually want to drop the <code>lin_reg</code> and <code>data</code>, otherwise you carry around a lot of redundant data in your <code>tibble</code> which may exceed your memory storage capacity very quickly.</em>]</p>\",\"*Note: For accessing elements in a nested `tibble` you may use the `pluck()`. For example, for accessing the first `tibble` in the column `data`, you may run `nested_penguins %>% pluck(\\\"data\\\", 1)`.*\",\"*Note: You may eventually want to drop the `lin_reg` and `data`, otherwise you carry around a lot of redundant data in your `tibble` which may exceed your memory storage capacity very quickly.*\",\"*Note: `geom_col()` takes a `x` and `y` argument, whereas `geom_bar()` only takes a variable `x` and computes the `y`-quantity internally (e.g., the number of observations).*\"],\"matchOn\":[[1],[1],[1],[1],[1],[21],[3],[3],[3],[0],[1],[1],[31],[18],[1],[1],[1]],\"matchOff\":[[6],[6],[6],[6],[6],[26],[8],[8],[8],[5],[6],[6],[36],[23],[6],[6],[6]],\"replaceMatchOn\":[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]],\"replaceMatchOff\":[[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]},\"running\":false,\"replace\":false,\"preview\":false,\"gitFlag\":false,\"replacePattern\":\"\"}"
imageDirtyState="1"
saveActionState="0"
